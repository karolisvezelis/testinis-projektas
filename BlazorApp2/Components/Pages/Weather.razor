@page "/weather"
@using System.Text.Json
@using System.Text.Json.Serialization
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (stoteles == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <select class="form-control"
            @onchange="@((ChangeEventArgs __e) => setSelectedValue(__e?.Value.ToString()))">
        <option selected value="-1">select one</option>
        @foreach (var item in stoteles)
        {
            <option value="@item.Code">@item.Name</option>
        }
    </select>

  @*   <InputSelect class="form-select"
                 style="width:200px"
                 TValue="string"
                 Value="mySelect"
                 ValueChanged="val => setSelectedValue(val)"
                 ValueExpression="@(() => mySelect)">

        <option selected value="-1">select one</option>
        @foreach (var item in stoteles)
        {
            <option value="@item.Code">@item.Name</option>
        }
    </InputSelect> *@


    @if (forecasts != null)
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>vejo greitis. (m/s)</th>
                    <th>feels like  (C)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in forecasts)
                {
                    <tr>
                        <td>@forecast.Date</td>
                        <td>@forecast.airTemperature</td>
                        <td>@forecast.windSpeed</td>
                        <td>@forecast.feelsLikeTemperature</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@* <h1> @mySelect </h1> *@

@code {
    private ForecastItem[]? forecasts;
    private Stotis[]? stoteles;
    private ElementReference myselect;
    private string mySelect = string.Empty;


    public void setSelectedValue(string selectedValue)
    {

        var httpClient = new HttpClient();

        var message = httpClient.GetAsync($"https://api.meteo.lt/v1/places/{selectedValue}/forecasts/long-term").GetAwaiter().GetResult();

        var result = message.Content.ReadAsStringAsync().GetAwaiter().GetResult();

        var placesWithForecasts = JsonSerializer.Deserialize<Place>(result);

        forecasts = placesWithForecasts.Items;
    }

    protected override async Task OnInitializedAsync()
    {
        var httpClient = new HttpClient();

        var message = await httpClient.GetAsync("https://api.meteo.lt/v1/places");

        var result = await message.Content.ReadAsStringAsync();

        stoteles = JsonSerializer.Deserialize<Stotis[]>(result);

    }

    public class Stotis
    {
        [JsonPropertyName("code")]
        public string Code { get; set; }
        [JsonPropertyName("name")]
        public string Name { get; set; }
    }

    public class Place
    {

        [JsonPropertyName("administrativeDivision")]
        public string administrativeDivision { get; set; }

        [JsonPropertyName("country")]
        public string country { get; set; }

        [JsonPropertyName("countryCode")]
        public string countryCode { get; set; }

        [JsonPropertyName("forecastTimestamps")]
        public ForecastItem[] Items { get; set; }
    }

    public class ForecastItem
    {
        [JsonPropertyName("forecastTimeUtc")]
        public string Date { get; set; }

        [JsonPropertyName("airTemperature")]
        public decimal airTemperature { get; set; }

        [JsonPropertyName("feelsLikeTemperature")]
        public decimal feelsLikeTemperature { get; set; }

        [JsonPropertyName("windSpeed")]
        public decimal windSpeed { get; set; }
    }
}
